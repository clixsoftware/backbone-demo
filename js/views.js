// Generated by CoffeeScript 1.3.3
/*
# MEMBERS LIST
*/

var __hasProp = {}.hasOwnProperty;

App.View.Member.list = Backbone.View.extend({
  tagName: 'tbody',
  initialize: function() {
    var filter, template;
    this.collection.on('reset', this.render, this);
    this.collection.on('add', function(member) {
      if (!this.options.filter || this.options.filter.search(member.get('type')) !== -1) {
        return this.$el.append(new App.View.Member.listItem({
          model: member
        }).render().el);
      }
    }, this);
    template = Handlebars.templates['members'];
    filter = {};
    switch (this.options.filter) {
      case 'patients':
        filter.patient = true;
        break;
      case 'nurses':
        filter.nurse = true;
        break;
      case 'doctors':
        filter.doctor = true;
        break;
      default:
        filter.all = true;
    }
    $('[data-template="members"] > div').html(template({
      filter: filter
    }));
    return $('[data-list="members"]').append(this.render().el);
  },
  render: function() {
    _.each(this.collection.models, function(member) {
      return this.$el.append(new App.View.Member.listItem({
        model: member
      }).render().el);
    }, this);
    return this;
  }
});

/*
# MEMBER LIST ITEM
*/


App.View.Member.listItem = Backbone.View.extend({
  tagName: 'tr',
  initialize: function() {
    this.model.on('change', this.render, this);
    return this.model.on('destroy remove', this.close, this);
  },
  render: function(eventName) {
    var template;
    template = Handlebars.templates['member'];
    this.$el.html(template({
      member: this.model.attributes
    }));
    return this;
  },
  close: function() {
    $(this.el).unbind();
    return $(this.el).remove();
  }
});

/*
# MEMBER VIEW / DETAILS
*/


App.View.Member.view = Backbone.View.extend({
  tagName: 'div',
  className: 'well member',
  initialize: function() {
    this.model.on('change', this.render, this);
    return App.View.Member.crudLoadView('read', this);
  },
  render: function(eventName) {
    var self, template;
    self = this;
    template = Handlebars.templates['member-view'];
    this.$el.html(template({
      member: self.model.attributes
    }));
    return this;
  }
});

/*
# UPDATE
*/


App.View.Member.update = Backbone.View.extend({
  tagName: 'div',
  className: 'well member',
  initialize: function() {
    this.model.on('change', this.render, this);
    return App.View.Member.crudLoadView('update', this);
  },
  render: function(eventName) {
    var self, template;
    self = this;
    template = Handlebars.templates['member-update'];
    this.$el.html(template({
      member: self.model.attributes
    }));
    return this;
  },
  events: {
    'submit form': 'save'
  },
  save: function(e) {
    var info, self;
    self = this;
    info = this.$el.find('form').serializeObject();
    return this.model.save(info, {
      wait: true,
      error: function(model, response) {
        return App.View.Member.createErrorMsgs(response, self);
      },
      success: function(model, response) {
        var existingModel;
        if (App.Members) {
          existingModel = App.Members.get(self.model.id);
          if (existingModel && (existingModel.cid !== self.model.cid)) {
            existingModel.set(info);
          }
        }
        Router.navigate("/members/" + self.model.id, {
          trigger: true
        });
        return App.View.Member.crudLoadAlert({
          type: 'success',
          message: 'Save was all good!'
        });
      }
    });
  }
});

/*
# DELETE
*/


App.View.Member["delete"] = Backbone.View.extend({
  tagName: 'div',
  className: 'well member',
  initialize: function() {
    return App.View.Member.crudLoadView('delete', this);
  },
  render: function(eventName) {
    var self, template;
    self = this;
    template = Handlebars.templates['member-delete'];
    this.$el.html(template({
      member: self.model.attributes
    }));
    return this;
  },
  events: {
    'submit form': 'save'
  },
  save: function(e) {
    var self;
    self = this;
    return this.model.destroy({
      wait: true,
      error: function(model, response) {
        return console.log(response);
      },
      success: function(model, response) {
        var existingModel;
        if (App.Members) {
          existingModel = App.Members.get(self.model.id);
          if (existingModel && (existingModel.cid !== self.model.cid)) {
            App.Members.remove(existingModel);
          }
        }
        Router.navigate('/members/create', {
          trigger: true
        });
        return App.View.Member.crudLoadAlert({
          type: 'success',
          message: 'He gone!'
        });
      }
    });
  }
});

/*
# CREATE
*/


App.View.Member.create = Backbone.View.extend({
  tagName: 'div',
  className: 'well member',
  initialize: function() {
    return App.View.Member.crudLoadView('create', this);
  },
  render: function(eventName) {
    var template;
    template = Handlebars.templates['member-create'];
    this.$el.html(template);
    return this;
  },
  events: {
    'submit form': 'save'
  },
  save: function(e) {
    var info, member, self;
    self = this;
    info = this.$el.find('form').serializeObject();
    member = new App.Model.Member;
    return member.save(info, {
      wait: true,
      error: function(model, response) {
        return App.View.Member.createErrorMsgs(response, self);
      },
      success: function(model, response) {
        if (App.Members) {
          App.Members.add(member);
        }
        Router.navigate("/members/" + response.id, {
          trigger: true
        });
        return App.View.Member.crudLoadAlert({
          type: 'success',
          message: 'Sweet! Member created!'
        });
      }
    });
  }
});

/*
# HELPER METHOD FOR THE CRUD VIEWS
*/


App.View.Member.crudLoadView = function(action, self) {
  var $target, crud, template;
  if (self == null) {
    self = this;
  }
  $target = $('[data-template="member-crud"] > div');
  template = Handlebars.templates['member-nav'];
  crud = {};
  crud[action] = true;
  if (self.model) {
    crud.id = self.model.id;
  }
  $target.html(template({
    crud: crud
  }));
  return $target.append(self.render().el);
};

App.View.Member.crudLoadAlert = function(o, template, self) {
  var alertTemplate;
  if (template == null) {
    template = 'member-crud';
  }
  if (self == null) {
    self = this;
  }
  alertTemplate = Handlebars.templates['alert'];
  return $('[data-template="' + template + '"]').prepend(alertTemplate({
    type: o.type,
    message: o.message
  })).find('[data-alert]').fadeIn('slow').delay(2500).fadeOut('slow', function() {
    return $(this).remove();
  });
};

App.View.Member.createErrorMsgs = function(errors, self) {
  var cnt, divider, eMsg, key, msg, msgs, tot, _i, _len, _results;
  self.$el.find('.control-group').removeClass('error').find('[class*="help"]').html('');
  _results = [];
  for (key in errors) {
    if (!__hasProp.call(errors, key)) continue;
    msgs = errors[key];
    cnt = 1;
    tot = msgs.length;
    eMsg = '';
    for (_i = 0, _len = msgs.length; _i < _len; _i++) {
      msg = msgs[_i];
      divider = tot !== cnt ? ', ' : '';
      eMsg += msg + divider;
      cnt++;
    }
    _results.push(self.$el.find('[name="' + key + '"]').parents('.control-group:eq(0)').addClass('error').find('[class*="help"]').html(eMsg));
  }
  return _results;
};
